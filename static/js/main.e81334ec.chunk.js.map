{"version":3,"sources":["util.js","booksGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["getDataFromAPI","searchString","page","arguments","length","undefined","axios","get","params","q","getMarkUp","htmlString","react_default","a","createElement","dangerouslySetInnerHTML","data","__html","TitlebarGridList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentBook","bookInfo","open","fullWidth","handleOpen","bind","assertThisInitialized","handleClose","book","id","_this2","then","request","_request$data","console","log","setState","catch","e","error","_this3","_this$props","classes","tileData","_this$state","_this$state$currentBo","_currentBook$best_boo","best_book","className","root","GridList_default","spacing","gridList","cols","map","tile","GridListTile_default","key","concat","books_count","ratings_count","ButtonBase_default","image","img","src","image_url","alt","title","GridListTileBar_default","subtitle","name","actionIcon","IconButton_default","icon","onClick","Info_default","Dialog_default","maxWidth","onClose","aria-labelledby","DialogTitle_default","DialogContentText_default","DialogContent_default","Grid_default","container","item","xs","sm","direction","Typography_default","variant","color","isbn","publisher","num_pages","average_rating","language_code","description","reviews_widget","Component","withStyles","theme","paper","position","width","unit","backgroundColor","palette","background","boxShadow","shadows","padding","outline","display","flexWrap","justifyContent","overflow","height","margin","maxHeight","App","showMessage","msg","enqueueSnackbar","value","queryDetails","books","pageIndex","fetchResults","handleChange","makeRequest","loadMore","event","target","result","formatData","Error","_context","t0","message","preventDefault","objectSpread","Paper_default","elevation","onSubmit","InputBase_default","input","onChange","style","border","borderStyle","borderRadius","placeholder","iconButton","aria-label","Search_default","booksGrid","Button_default","button","results","otherprops","objectWithoutProperties","_results$work","work","_book$best_book","_best_book$author","author","ParentComponent","withSnackbar","mixins","gutters","paddingTop","paddingBottom","marginLeft","flex","divider","IntegrationNotistack","build","maxSnack","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e81334ec.chunk.js","sourcesContent":["import axios from \"axios\";\nconst API_BASE_URL = \"https://evxoorqk27.execute-api.ap-south-1.amazonaws.com/dev/goodreadshello\";\nconst API_REVIEW = \"https://evxoorqk27.execute-api.ap-south-1.amazonaws.com/dev/getbooksreview\";\n\nexport const getDataFromAPI = (searchString, page = 1) => {\n  return axios.get(API_BASE_URL, {\n    params: {\n      q: searchString,\n      page\n    }\n  });\n};\n\nexport const getReviewDataFromAPI = id => {\n  return axios.get(API_REVIEW, {\n    params: {\n      id\n    }\n  });\n};\n\nexport const formatData = data => {\n  let { results, ...otherprops } = data;\n  if (typeof results == \"string\") {\n    results = {};\n  }\n  const { work: books = [] } = results;\n  const flattned = books.map(book => {\n    const { best_book = {} } = book;\n    const { author = {} } = best_book;\n    const final = {\n      ...books,\n      ...author,\n      ...best_book\n    };\n    return final;\n  });\n  return {\n    queryDetails: otherprops,\n    books: flattned\n  };\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n// import Modal from \"@material-ui/core/Modal\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { getReviewDataFromAPI } from \"./util\";\n\nfunction createMarkup(data) {\n  return { __html: data };\n}\n\nfunction getMarkUp(htmlString) {\n  return <div dangerouslySetInnerHTML={createMarkup(htmlString)} />;\n}\nconst styles = theme => ({\n  paper: {\n    position: \"absolute\",\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  },\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: \"95%\",\n    height: \"95%\"\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\"\n  },\n  image: {\n    width: 128,\n    height: 128\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n});\n\nclass TitlebarGridList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentBook: {},\n      bookInfo: {},\n      open: false,\n      fullWidth: true\n    };\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n  handleOpen(book) {\n    //  fetch the review for book\n    getReviewDataFromAPI(book.id)\n      .then(request => {\n        const { data = {} } = request;\n        const { book: bookInfo } = data;\n        console.log(bookInfo);\n        this.setState({ bookInfo });\n      })\n      .catch(e => {\n        console.error(e);\n      });\n    this.setState({ open: true, currentBook: book });\n  }\n  handleClose() {\n    this.setState({ open: false, currentBook: {}, bookInfo: {} });\n  }\n  render() {\n    const { classes, tileData } = this.props;\n    const { currentBook = {}, bookInfo } = this.state;\n    const { best_book = {} } = currentBook;\n    return (\n      <div className={classes.root}>\n        <GridList spacing={10} className={classes.gridList} cols={6}>\n          {tileData.map(tile => (\n            <GridListTile key={`${tile.id}_${tile.books_count}_${tile.ratings_count}`}>\n              <ButtonBase className={classes.image}>\n                <img className={classes.img} src={tile.image_url} alt={tile.title} />\n              </ButtonBase>\n              {/* <img src={tile.image_url} alt={tile.title} /> */}\n              <GridListTileBar\n                title={tile.title}\n                subtitle={<span>by: {tile.name}</span>}\n                actionIcon={\n                  <IconButton className={classes.icon} onClick={() => this.handleOpen(tile)}>\n                    <InfoIcon />\n                  </IconButton>\n                }\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n        <Dialog\n          fullWidth={this.state.fullWidth}\n          maxWidth={\"md\"}\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"max-width-dialog-title\"\n        >\n          <DialogTitle id=\"max-width-dialog-title\">\n            <DialogContentText>{currentBook.title}</DialogContentText>\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={16}>\n              <Grid item>\n                <ButtonBase className={classes.image}>\n                  <img className={classes.img} src={currentBook.image_url} alt={currentBook.title} />\n                </ButtonBase>\n              </Grid>\n              <Grid item xs={12} sm container>\n                <Grid item xs container direction=\"column\" spacing={16}>\n                  <Grid item xs>\n                    <Typography variant=\"subtitle2\" id=\"modal-title2\">\n                      {currentBook.name}\n                    </Typography>\n                    <Typography color=\"textSecondary\">ID: {best_book.id}</Typography>\n                    <Typography color=\"textSecondary\">ISBN: {bookInfo.isbn}</Typography>\n                    <Typography color=\"textSecondary\">Publisher: {bookInfo.publisher}</Typography>\n                    <Typography color=\"textSecondary\">Pages: {bookInfo.num_pages}</Typography>\n                  </Grid>\n                </Grid>\n                <Grid item xs>\n                  <Typography variant=\"subtitle2\">Rating {currentBook.average_rating}</Typography>\n                  <Typography color=\"textSecondary\">Count {currentBook.ratings_count}</Typography>\n                  <Typography color=\"textSecondary\">Language: {bookInfo.language_code}</Typography>\n                </Grid>\n              </Grid>\n              {bookInfo.description ? (\n                <Grid item>\n                  <Typography variant=\"subtitle1\">Description</Typography>\n                  <Typography color=\"textSecondary\" variant=\"subtitle1\">\n                    {getMarkUp(bookInfo.description)}\n                  </Typography>\n                  <Typography color=\"textSecondary\" variant=\"subtitle1\">\n                    {getMarkUp(bookInfo.reviews_widget)}\n                  </Typography>\n                </Grid>\n              ) : null}\n            </Grid>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nTitlebarGridList.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(TitlebarGridList);\n","import React, { Component } from \"react\";\nimport { getDataFromAPI } from \"./util\";\nimport \"./App.css\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport InputBase from \"@material-ui/core/InputBase\";\n// import Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { SnackbarProvider, withSnackbar } from \"notistack\";\nimport BookGrid from \"./booksGrid\";\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 1,\n    paddingBottom: theme.spacing.unit * 2\n    // display: \"flex\",\n    // alignItems: \"center\"\n    // width: 300\n  },\n  input: {\n    padding: 3,\n    marginLeft: 8,\n    flex: 1,\n    width: 400\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4\n  },\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass App extends Component {\n  static formatData = data => {\n    let { results, ...otherprops } = data;\n    if (typeof results == \"string\") {\n      results = {};\n    }\n    const { work: books = [] } = results;\n    const flattned = books.map(book => {\n      const { best_book = {} } = book;\n      const { author = {} } = best_book;\n      const final = {\n        ...book,\n        ...author,\n        ...best_book\n      };\n      return final;\n    });\n    return {\n      queryDetails: otherprops,\n      books: flattned\n    };\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      queryDetails: {},\n      books: [],\n      pageIndex: 1\n    };\n    this.fetchResults = this.fetchResults.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.makeRequest = this.makeRequest.bind(this);\n    this.loadMore = this.loadMore.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  async makeRequest(searchString, page) {\n    try {\n      const result = await getDataFromAPI(searchString, page);\n      // console.log(result.data);\n      return App.formatData(result.data);\n    } catch (e) {\n      throw Error(e.message);\n    }\n  }\n\n  loadMore(event) {\n    const { pageIndex } = this.state;\n    this.makeRequest(this.state.value, pageIndex + 1)\n      .then(result => {\n        const { books, queryDetails } = result;\n        if (result.books.length === 0) {\n          this.showMessage(\"No more books to fetch!\", \"warning\");\n        }\n        this.setState({\n          pageIndex: pageIndex + 1,\n          books: this.state.books.concat(books),\n          queryDetails\n        });\n      })\n      .catch(e => {\n        console.error(e);\n      });\n    event.preventDefault();\n  }\n\n  fetchResults(event) {\n    // console.log(this.state.value);\n    this.makeRequest(this.state.value)\n      .then(result => {\n        if (result.books.length === 0) {\n          this.showMessage(\"No Books found!\", \"warning\");\n        }\n        this.setState({ ...result });\n      })\n      .catch(e => {\n        console.error(e);\n      });\n    event.preventDefault();\n  }\n\n  showMessage = (msg, variant) => {\n    // variant could be success, error, warning or info\n    this.props.enqueueSnackbar(msg, { variant });\n  };\n  render() {\n    const { classes } = this.props;\n    const { books } = this.state;\n    // const classes = styles;\n    return (\n      <div className=\"App\">\n        <Paper elevation={1} className={classes.root}>\n          <form onSubmit={this.fetchResults}>\n            <Typography variant=\"subtitle1\" id=\"modal-title\">\n              GoodReads API search\n            </Typography>\n            <InputBase\n              className={classes.input}\n              onChange={this.handleChange}\n              style={{ border: \"grey 1px\", borderStyle: \"solid\", borderRadius: \"5px\" }}\n              placeholder=\"Search for a Book\"\n            />\n            <IconButton className={classes.iconButton} aria-label=\"Search\">\n              <SearchIcon />\n            </IconButton>\n          </form>\n          {/* <Divider className={classes.divider} /> */}\n        </Paper>\n        <div>\n          <BookGrid tileData={books} />\n          {books && books.length ? (\n            <Button onClick={this.loadMore} variant=\"contained\" className={classes.button}>\n              Load More\n            </Button>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ParentComponent = withSnackbar(withStyles(styles)(App));\n// const MyApp = withSnackbar(App);\n\nfunction IntegrationNotistack() {\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <ParentComponent />\n    </SnackbarProvider>\n  );\n}\n\nexport default IntegrationNotistack;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}